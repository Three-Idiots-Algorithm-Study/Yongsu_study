## 삽입정렬   
[코드](https://github.com/KANGYONGSU23/CodingTest/tree/main/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4/1/42748.%E2%80%85K%EB%B2%88%EC%A7%B8%EC%88%98)

<aside>
💡 삽입 정렬은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.

</aside>

1. 5를 정렬이 완료된 상태로 정한다.
2. 3을 정렬이 완료된 배열 부분에서 들어갈 알맞은 곳을 찾아 들어간다. 이 때는 5의 앞이다.
3. 8이 정렬이 되면 5의 뒤이기 때문에 움직일 필요가 없다.
4. 1을 정렬 시키면 가장 앞으로 이동한다.
5. 위와 같은 방법을 반복한다.

![Untitled](https://file.notion.so/f/f/c1f98da2-42fc-44dd-85b7-2a22a5b1b2c3/3e54dcce-6979-42d8-987b-b7bc3823339d/Untitled.png?id=0d7c7556-0dea-40e4-a2fd-78f6f3e9d45f&table=block&spaceId=c1f98da2-42fc-44dd-85b7-2a22a5b1b2c3&expirationTimestamp=1706104800000&signature=wIS446Y76M600cmVha4lqhEAoYGjbMRpUTh1KT8aOuI&downloadName=Untitled.png)

**장점**

> 
> 
> 1. 안정한 정렬 방법
> 2. 레코드의 수가 적을 경우 알고리즘 자체가 매우 간단하므로 다른 복잡한 정렬 방법보다 유리할 수 있다.
> 3. 대부분위 레코드가 이미 정렬되어 있는 경우에 매우 효율적일 수 있다.

**단점**

> 
> 
> 1. 비교적 많은 레코드들의 이동을 포함한다.
> 2. 레코드 수가 많고 레코드 크기가 클 경우에 적합하지 않다.
